// TypeScript 란?

// JS에서 타입설정이 추가된 언어
// JS에서 타입이 확장된 언어
// TS는 JS의 상위 집합 슈퍼셋으로서 , 대형 프로젝트를 진행할때 어느정도 버그를 잡는데 유용하다
// C++, C# 같이 객체지향프로그래밍을 지원하는데
// TS는 객체지향프로그래밍에 특화된 프로그래밍 패턴을 지원하는데
// 현재는 함수형 프로그래밍이 좀 대세라서 type 검사나 추론 등의 기능을 사용만 할거다

// TS를 쓰면 JS로 작업할때 보다 개발에서 생기는 에러를 사전에 방지할수 있고,
// JS 코드의 품질과 개발 생산성을 높일수 있다.

// 코드의 완성 가이드
// JS는 타입이 정해져 있지 않아서 자동완성이 미리 뜨지 않아 일일히 타이핑 해야함
// TS는 타입을 정해놔서 미리 자동완성이 뜨기 때문에 빠르고 정확하게 작업할 수 있다.

// TS는 에러를 사전에 방지하는데, JS는 코드를 실행시켜야지 에러를 확인할수 있다.
// TS는 작성한 코드가 문제가 있으면 실행 전부터 바로 확인해서 문제를 해결할수있다.

// TS는 프로그래밍 언어이고, TS의 컴파일은 그냥 TS 코드를 JS 코드로 바꿔주는 것
// JS로 바꿔주는 이유는 >> 브라우저가 이해할수 있는것은 JS 코드이기 때문에

// TS 설치해보자

// 설치 명령어
// ----------------------------------------------------------
// npm i -g typescript
// ----------------------------------------------------------

// 설치 확인
// ----------------------------------------------------------
// tsc --version
// ----------------------------------------------------------

// tsconfig.json 상세 명령어

// ----------------------------------------------------------
// tsc --init
// ----------------------------------------------------------
// 설치 후 빨간색 뜨면 src폴더 생성 -> app.ts 생성 -> VS code 껏다 켜기

// tsconfig.json은 TS의 설정파일, TS의 설정값을 조장 할 수 있다.

// TS의 변수 타입 지정

// 변수명 : 타입 = 초기값

// JS는 변수명 = 초기값

// ts-node라는 TS 실행기를 사용해서 개발환경에서 TS로 작성된 파일을 실행시켜볼 수 있다.

// 설치 명령어

// ----------------------------------------------------------
// npm i -D typescript ts-node @types/node
// ----------------------------------------------------------
